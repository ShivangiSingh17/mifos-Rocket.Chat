// Generated by Dagger (https://google.github.io/dagger).
package chat.rocket.android.draw.dagger;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import androidx.lifecycle.LifecycleOwner;
import chat.rocket.android.core.lifecycle.CancelStrategy;
import chat.rocket.android.draw.dagger.module.ActivityBuilderModule_ContributeDrawingActivityInjector;
import chat.rocket.android.draw.main.di.DrawModule;
import chat.rocket.android.draw.main.di.DrawModule_ProvideCancelStrategyFactory;
import chat.rocket.android.draw.main.di.DrawModule_ProvideJobFactory;
import chat.rocket.android.draw.main.di.DrawModule_ProvideLifecycleOwnerFactory;
import chat.rocket.android.draw.main.di.DrawModule_ProvideMainViewFactory;
import chat.rocket.android.draw.main.presenter.DrawPresenter;
import chat.rocket.android.draw.main.presenter.DrawView;
import chat.rocket.android.draw.main.ui.DrawingActivity;
import chat.rocket.android.draw.main.ui.DrawingActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerApplication;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<
          ActivityBuilderModule_ContributeDrawingActivityInjector.DrawingActivitySubcomponent
              .Builder>
      drawingActivitySubcomponentBuilderProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(
                DrawingActivity.class, (Provider) drawingActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<androidx.fragment.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends androidx.fragment.app.Fragment>,
                Provider<AndroidInjector.Factory<? extends androidx.fragment.app.Fragment>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.drawingActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilderModule_ContributeDrawingActivityInjector.DrawingActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilderModule_ContributeDrawingActivityInjector.DrawingActivitySubcomponent
                  .Builder
              get() {
            return new DrawingActivitySubcomponentBuilder();
          }
        };
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private DaggerApplication seedInstance;

    @Override
    public AppComponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            DaggerApplication.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public void seedInstance(DaggerApplication arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DrawingActivitySubcomponentBuilder
      extends ActivityBuilderModule_ContributeDrawingActivityInjector.DrawingActivitySubcomponent
          .Builder {
    private DrawModule drawModule;

    private DrawingActivity seedInstance;

    @Override
    public ActivityBuilderModule_ContributeDrawingActivityInjector.DrawingActivitySubcomponent
        build() {
      if (drawModule == null) {
        this.drawModule = new DrawModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(DrawingActivity.class.getCanonicalName() + " must be set");
      }
      return new DrawingActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(DrawingActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class DrawingActivitySubcomponentImpl
      implements ActivityBuilderModule_ContributeDrawingActivityInjector
          .DrawingActivitySubcomponent {
    private DrawModule drawModule;

    private DrawingActivity seedInstance;

    private DrawingActivitySubcomponentImpl(DrawingActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private DrawView getDrawView() {
      return DrawModule_ProvideMainViewFactory.proxyProvideMainView(drawModule, seedInstance);
    }

    private LifecycleOwner getLifecycleOwner() {
      return DrawModule_ProvideLifecycleOwnerFactory.proxyProvideLifecycleOwner(
          drawModule, seedInstance);
    }

    private CancelStrategy getCancelStrategy() {
      return DrawModule_ProvideCancelStrategyFactory.proxyProvideCancelStrategy(
          drawModule,
          getLifecycleOwner(),
          DrawModule_ProvideJobFactory.proxyProvideJob(drawModule));
    }

    private DrawPresenter getDrawPresenter() {
      return new DrawPresenter(getDrawView(), getCancelStrategy());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DrawingActivitySubcomponentBuilder builder) {
      this.drawModule = builder.drawModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(DrawingActivity arg0) {
      injectDrawingActivity(arg0);
    }

    private DrawingActivity injectDrawingActivity(DrawingActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      DrawingActivity_MembersInjector.injectPresenter(instance, getDrawPresenter());
      return instance;
    }
  }
}
