// Generated by Dagger (https://google.github.io/dagger).
package chat.rocket.android.draw.main.di;

import androidx.lifecycle.LifecycleOwner;
import chat.rocket.android.core.lifecycle.CancelStrategy;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlinx.coroutines.Job;

public final class DrawModule_ProvideCancelStrategyFactory implements Factory<CancelStrategy> {
  private final DrawModule module;

  private final Provider<LifecycleOwner> ownerProvider;

  private final Provider<Job> jobsProvider;

  public DrawModule_ProvideCancelStrategyFactory(
      DrawModule module, Provider<LifecycleOwner> ownerProvider, Provider<Job> jobsProvider) {
    this.module = module;
    this.ownerProvider = ownerProvider;
    this.jobsProvider = jobsProvider;
  }

  @Override
  public CancelStrategy get() {
    return provideInstance(module, ownerProvider, jobsProvider);
  }

  public static CancelStrategy provideInstance(
      DrawModule module, Provider<LifecycleOwner> ownerProvider, Provider<Job> jobsProvider) {
    return proxyProvideCancelStrategy(module, ownerProvider.get(), jobsProvider.get());
  }

  public static DrawModule_ProvideCancelStrategyFactory create(
      DrawModule module, Provider<LifecycleOwner> ownerProvider, Provider<Job> jobsProvider) {
    return new DrawModule_ProvideCancelStrategyFactory(module, ownerProvider, jobsProvider);
  }

  public static CancelStrategy proxyProvideCancelStrategy(
      DrawModule instance, LifecycleOwner owner, Job jobs) {
    return Preconditions.checkNotNull(
        instance.provideCancelStrategy(owner, jobs),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
